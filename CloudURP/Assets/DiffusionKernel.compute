#pragma kernel DiffuseKernel

// "Read" buffer from the previous iteration
Texture3D<float> bufferRead;
// The initial state of the buffer before the solve began
Texture3D<float> initialBuffer;

// "Write" buffer for the current iteration
RWTexture3D<float> bufferWrite;

// Diffusion rate and alpha are calculated in C#
float alpha;
float rBeta; // Reciprocal of beta (1 / beta)

[numthreads(8,8,8)]
void DiffuseKernel(uint3 id : SV_DispatchThreadID)
{
    // 1. Sample the neighbors (left, right, bottom, top, back, front)
    float neighborSum =
        bufferRead[id + uint3(-1, 0, 0)] +
        bufferRead[id + uint3(1, 0, 0)] +
        bufferRead[id + uint3(0, -1, 0)] +
        bufferRead[id + uint3(0, 1, 0)] +
        bufferRead[id + uint3(0, 0, -1)] +
        bufferRead[id + uint3(0, 0, 1)];

    // 2. Get the value from the initial state of the buffer
    float initialValue = initialBuffer[id];

    // 3. Apply the Jacobi iteration formula
    float diffusedValue = (neighborSum + alpha * initialValue) * rBeta;

    // 4. Write the result for this iteration
    bufferWrite[id] = diffusedValue;
}
